@startuml firstMilestoneDiagram
skinparam classAttributeIconSize 0

package "firstmilestone" {

  class Actions {
    {static} + String ACTION_OPEN
    {static} + String ACTION_CLOSE
    {static} + String ACTION_LOCK
    {static} + String ACTION_UNLOCK
    {static} + String ACTION_UNLOCK_SHORT
    {static} + String ACTION_PROP
  }

  abstract Area {
    -String name
    -String description
    {abstract} +Partition[] getPartitions();
    {abstract} +Door[] getDoors();
  }

  class Space {
    -Partition Partition_father
    -Door[] Doors_children
    +Door[] getDoors()
    +void addDoorChild(Door[] child)
    +Partition[] getPartitions()
  }

  class Partition {
    -Partition[] Partition_children
    -Space[] Space_children
    +void addPartitionChild(Partition child)
    +void addSpaceChild(Space child)
    +Door[] add(Door[] array1, Door[] array2)
    +Door[] getDoors()
    +Partition[] getPartitions()
  }

  class Schedule {
    -DayOfWeek[] days
    -LocalTime[] hours
    -LocalDate[] dates
  }

  class User {
    -String username
    -String credential
    -UserGroup userGroup
  }

  class UserGroup {
    -User[] users
    -String userGroupName
    -Schedule schedule
    -String[] actions
    -String[] doors
    
    +void addUser(User user)
    +boolean isActionAllowed(String action, String doorId, LocalDateTime now)
  }

  class Door {
    -String id
    -boolean closed
    -DoorState state
   
    +void processRequest(RequestReader request)
    +boolean isClosed()
    +void doAction(String action)

  }

  abstract class DoorState {
    #  Door door
    {abstract} +void open(Door door)
    {abstract} +void close(Door door)
    {abstract} +void lock(Door door)
    {abstract} +void unlock(Door door)
    {abstract} +void unlockShort(Door door)
    {abstract} +void prop(Door door)
  }

  class DoorLocked{
    +void open(Door door)
    +void close(Door door)
    +void lock(Door door)
    +void unlock(Door door)
    +void unlockShort(Door door)
    +void prop(Door door)
    }
  class DoorPropped{
    +void open(Door door)
    +void close(Door door)
    +void lock(Door door)
    +void unlock(Door door)
    +void unlockShort(Door door)
    +void prop(Door door)
    }
  class DoorUnlocked{
    +void open(Door door)
    +void close(Door door)
    +void lock(Door door)
    +void unlock(Door door)
    +void unlockShort(Door door)
    +void prop(Door door)
    }

  class DoorUnlockedSh{
    +void update(Obsservable observable, Object arg)
    +void open(Door door)
    +void close(Door door)
    +void lock(Door door)
    +void unlock(Door door)
    +void unlockShort(Door door)
    +void prop(Door door)
    }

  ' Directory singletons
  class DirectoryAreas {
    {static} - ArrayList<Area> allAreas 
    {static} + Area findAreaByName (String name)
    {static} + void makeAreas()
  }

  class DirectoryDoors {
    {static} - ArrayList<Door> allDoors 
    {static} + void makeDoors()
    {static} + Area findDoorById (String id)
  }

  class DirectoryUsers {
    {static} - ArrayList<User> users
    {static} + void makeUsers()
    {static} + User findByCredential (String credential)
  }

  class DirectoryUserGroups {
    {static} - UserGroup[] userGroups
    {static} + void makeUserGroups()
    {static} + UserGroup findUserGroupByName (String name)
  }

}

' Relationships
UserGroup "1" o-- "*" User : members
User "1" --> "1" UserGroup : group
Area "1" o-- "*" Space : extends
Partition "1" o-- "*" Space : contains
Space "1" o-r- "*" Door : contains
Area "1" o-- "*" Partition : extends
Door "1" -d-> "1" DoorState : has
DoorUnlockedSh -u-|>  DoorState
DoorUnlocked -u-|> DoorState
DoorLocked -u-|> DoorState
DoorPropped -u-|> DoorState
DirectoryAreas "1" o-- "*" Area
DirectoryDoors "1" o-l- "*" Door
DirectoryUsers "1" o-- "*" User
DirectoryUserGroups "1" o-- "*" UserGroup

@enduml
